package sample.model.asset;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import sample.context.ActionStatusType;
import sample.context.ValidationException;
import sample.model.BusinessDayHandler;
import sample.model.DataFixtures;
import sample.model.DomainErrorKeys;
import sample.model.DomainTester;
import sample.model.DomainTester.DomainTesterBuilder;
import sample.model.support.HolidayAccessorMock;

// low: Focus is on simple normal system verification. Assumes unit verification path for dependent CashBalance.
public class CashflowTest {
    private DomainTester tester;
    private BusinessDayHandler businessDay;

    @BeforeEach
    public void before() {
        tester = DomainTesterBuilder.from(Cashflow.class, CashBalance.class).build();
        businessDay = BusinessDayHandler.of(tester.time(), new HolidayAccessorMock());
    }

    @AfterEach
    public void after() {
        tester.close();
    }

    @Test
    public void register() {
        LocalDate baseDay = businessDay.day();
        LocalDate baseMinus1Day = businessDay.day(-1);
        LocalDate basePlus1Day = businessDay.day(1);
        tester.tx(rep -> {
            // Cash flow generated by past date delivery [exception].
            try {
                Cashflow.register(rep, DataFixtures.cfReg("test1", "1000", baseMinus1Day));
                fail();
            } catch (ValidationException e) {
                assertEquals(AssetErrorKeys.AfterValueDay, e.getMessage());
            }
            // Cash flow generated by next day delivery
            var cf = Cashflow.register(rep, DataFixtures.cfReg("test1", "1000", basePlus1Day));
            assertEquals(new BigDecimal("1000"), cf.getAmount());
            assertEquals(ActionStatusType.UNPROCESSED, cf.getStatusType());
            assertEquals(baseDay, cf.getEventDay());
            assertEquals(basePlus1Day, cf.getValueDay());
        });
    }

    @Test
    public void realize() {
        LocalDate baseDay = businessDay.day();
        LocalDate baseMinus1Day = businessDay.day(-1);
        LocalDate baseMinus2Day = businessDay.day(-2);
        LocalDate basePlus1Day = businessDay.day(1);
        tester.tx(rep -> {
            CashBalance.getOrNew(rep, "test1", "JPY");

            // Unarrived delivery date [Exception].
            Cashflow cfFuture = rep.save(DataFixtures.cf("test1", "1000", baseDay, basePlus1Day));
            try {
                cfFuture.realize(rep);
                fail();
            } catch (ValidationException e) {
                assertEquals(AssetErrorKeys.RealizeDay, e.getMessage());
            }

            // Cash flow balance reflection verification. 0 + 1000 = 1000
            Cashflow cfNormal = rep.save(DataFixtures.cf("test1", "1000", baseMinus1Day, baseDay));
            assertEquals(ActionStatusType.PROCESSED, cfNormal.realize(rep).getStatusType());
            assertEquals(new BigDecimal("1000"), CashBalance.getOrNew(rep, "test1", "JPY").getAmount());

            // Re-realization of processed cache flow [exception].
            try {
                cfNormal.realize(rep);
                fail();
            } catch (ValidationException e) {
                assertEquals(DomainErrorKeys.StatusType, e.getMessage());
            }

            // Verification of balance reflection of past day cash flow. 1000 + 2000 = 3000
            Cashflow cfPast = rep.save(DataFixtures.cf("test1", "2000", baseMinus2Day, baseMinus1Day));
            assertEquals(ActionStatusType.PROCESSED, cfPast.realize(rep).getStatusType());
            assertEquals(new BigDecimal("3000"), CashBalance.getOrNew(rep, "test1", "JPY").getAmount());
        });
    }

    @Test
    public void registerWithRealize() {
        LocalDate baseDay = businessDay.day();
        tester.tx(rep -> {
            CashBalance.getOrNew(rep, "test1", "JPY");
            Cashflow.register(rep, DataFixtures.cfReg("test1", "1000", baseDay));
            assertEquals(new BigDecimal("1000"), CashBalance.getOrNew(rep, "test1", "JPY").getAmount());
        });
    }

}
